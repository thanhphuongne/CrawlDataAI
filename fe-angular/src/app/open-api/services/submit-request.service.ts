/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { submitRequestAdminApprovePost } from '../fn/submit-request/submit-request-admin-approve-post';
import { SubmitRequestAdminApprovePost$Params } from '../fn/submit-request/submit-request-admin-approve-post';
import { submitRequestApproverApprovePost } from '../fn/submit-request/submit-request-approver-approve-post';
import { SubmitRequestApproverApprovePost$Params } from '../fn/submit-request/submit-request-approver-approve-post';
import { submitRequestListAllGet } from '../fn/submit-request/submit-request-list-all-get';
import { SubmitRequestListAllGet$Params } from '../fn/submit-request/submit-request-list-all-get';
import { submitRequestListApproverGet } from '../fn/submit-request/submit-request-list-approver-get';
import { SubmitRequestListApproverGet$Params } from '../fn/submit-request/submit-request-list-approver-get';
import { submitRequestListAssignGet } from '../fn/submit-request/submit-request-list-assign-get';
import { SubmitRequestListAssignGet$Params } from '../fn/submit-request/submit-request-list-assign-get';
import { submitRequestListGet } from '../fn/submit-request/submit-request-list-get';
import { SubmitRequestListGet$Params } from '../fn/submit-request/submit-request-list-get';
import { submitRequestPost } from '../fn/submit-request/submit-request-post';
import { SubmitRequestPost$Params } from '../fn/submit-request/submit-request-post';
import { submitRequestPut } from '../fn/submit-request/submit-request-put';
import { SubmitRequestPut$Params } from '../fn/submit-request/submit-request-put';
import { submitRequestRankingGet } from '../fn/submit-request/submit-request-ranking-get';
import { SubmitRequestRankingGet$Params } from '../fn/submit-request/submit-request-ranking-get';
import { submitRequestSupervisorApprovePost } from '../fn/submit-request/submit-request-supervisor-approve-post';
import { SubmitRequestSupervisorApprovePost$Params } from '../fn/submit-request/submit-request-supervisor-approve-post';

@Injectable({ providedIn: 'root' })
export class SubmitRequestService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `submitRequestPut()` */
  static readonly SubmitRequestPutPath = '/submit-request';

  /**
   * Update submit request.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `submitRequestPut()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  submitRequestPut$Response(params: SubmitRequestPut$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return submitRequestPut(this.http, this.rootUrl, params, context);
  }

  /**
   * Update submit request.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `submitRequestPut$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  submitRequestPut(params: SubmitRequestPut$Params, context?: HttpContext): Observable<{
}> {
    return this.submitRequestPut$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `submitRequestPost()` */
  static readonly SubmitRequestPostPath = '/submit-request';

  /**
   * Create submit request.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `submitRequestPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  submitRequestPost$Response(params: SubmitRequestPost$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return submitRequestPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Create submit request.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `submitRequestPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  submitRequestPost(params: SubmitRequestPost$Params, context?: HttpContext): Observable<{
}> {
    return this.submitRequestPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `submitRequestListGet()` */
  static readonly SubmitRequestListGetPath = '/submit-request/list';

  /**
   * Get list submit request.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `submitRequestListGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  submitRequestListGet$Response(params?: SubmitRequestListGet$Params, context?: HttpContext): Observable<StrictHttpResponse<{

/**
 * The current page number
 */
'pageNumber'?: number;

/**
 * The number of items per page
 */
'pageSize'?: number;

/**
 * The total number of items
 */
'totalItems'?: number;

/**
 * The total number of pages
 */
'totalPages'?: number;
'data'?: Array<{
'id'?: number;
'accountName'?: string;
'descriptions'?: string;
'supervisor'?: number;
'categoryId'?: number;
'hasNotifyMail'?: boolean;
'suppervisorApproved'?: boolean;
'approverApproved'?: boolean;
'status'?: string;
'createBy'?: number;
}>;
}>> {
    return submitRequestListGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Get list submit request.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `submitRequestListGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  submitRequestListGet(params?: SubmitRequestListGet$Params, context?: HttpContext): Observable<{

/**
 * The current page number
 */
'pageNumber'?: number;

/**
 * The number of items per page
 */
'pageSize'?: number;

/**
 * The total number of items
 */
'totalItems'?: number;

/**
 * The total number of pages
 */
'totalPages'?: number;
'data'?: Array<{
'id'?: number;
'accountName'?: string;
'descriptions'?: string;
'supervisor'?: number;
'categoryId'?: number;
'hasNotifyMail'?: boolean;
'suppervisorApproved'?: boolean;
'approverApproved'?: boolean;
'status'?: string;
'createBy'?: number;
}>;
}> {
    return this.submitRequestListGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<{

/**
 * The current page number
 */
'pageNumber'?: number;

/**
 * The number of items per page
 */
'pageSize'?: number;

/**
 * The total number of items
 */
'totalItems'?: number;

/**
 * The total number of pages
 */
'totalPages'?: number;
'data'?: Array<{
'id'?: number;
'accountName'?: string;
'descriptions'?: string;
'supervisor'?: number;
'categoryId'?: number;
'hasNotifyMail'?: boolean;
'suppervisorApproved'?: boolean;
'approverApproved'?: boolean;
'status'?: string;
'createBy'?: number;
}>;
}>): {

/**
 * The current page number
 */
'pageNumber'?: number;

/**
 * The number of items per page
 */
'pageSize'?: number;

/**
 * The total number of items
 */
'totalItems'?: number;

/**
 * The total number of pages
 */
'totalPages'?: number;
'data'?: Array<{
'id'?: number;
'accountName'?: string;
'descriptions'?: string;
'supervisor'?: number;
'categoryId'?: number;
'hasNotifyMail'?: boolean;
'suppervisorApproved'?: boolean;
'approverApproved'?: boolean;
'status'?: string;
'createBy'?: number;
}>;
} => r.body)
    );
  }

  /** Path part for operation `submitRequestRankingGet()` */
  static readonly SubmitRequestRankingGetPath = '/submit-request/ranking';

  /**
   * Get ranking of submit requests.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `submitRequestRankingGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  submitRequestRankingGet$Response(params: SubmitRequestRankingGet$Params, context?: HttpContext): Observable<StrictHttpResponse<{

/**
 * The current page number
 */
'pageNumber'?: number;

/**
 * The number of items per page
 */
'pageSize'?: number;

/**
 * The total number of items
 */
'totalItems'?: number;

/**
 * The total number of pages
 */
'totalPages'?: number;
'data'?: Array<{

/**
 * The account name of the user
 */
'accountName'?: string;

/**
 * The total score of the user
 */
'totalScore'?: string;

/**
 * The rank of the user
 */
'rank'?: number;
}>;
}>> {
    return submitRequestRankingGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Get ranking of submit requests.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `submitRequestRankingGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  submitRequestRankingGet(params: SubmitRequestRankingGet$Params, context?: HttpContext): Observable<{

/**
 * The current page number
 */
'pageNumber'?: number;

/**
 * The number of items per page
 */
'pageSize'?: number;

/**
 * The total number of items
 */
'totalItems'?: number;

/**
 * The total number of pages
 */
'totalPages'?: number;
'data'?: Array<{

/**
 * The account name of the user
 */
'accountName'?: string;

/**
 * The total score of the user
 */
'totalScore'?: string;

/**
 * The rank of the user
 */
'rank'?: number;
}>;
}> {
    return this.submitRequestRankingGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<{

/**
 * The current page number
 */
'pageNumber'?: number;

/**
 * The number of items per page
 */
'pageSize'?: number;

/**
 * The total number of items
 */
'totalItems'?: number;

/**
 * The total number of pages
 */
'totalPages'?: number;
'data'?: Array<{

/**
 * The account name of the user
 */
'accountName'?: string;

/**
 * The total score of the user
 */
'totalScore'?: string;

/**
 * The rank of the user
 */
'rank'?: number;
}>;
}>): {

/**
 * The current page number
 */
'pageNumber'?: number;

/**
 * The number of items per page
 */
'pageSize'?: number;

/**
 * The total number of items
 */
'totalItems'?: number;

/**
 * The total number of pages
 */
'totalPages'?: number;
'data'?: Array<{

/**
 * The account name of the user
 */
'accountName'?: string;

/**
 * The total score of the user
 */
'totalScore'?: string;

/**
 * The rank of the user
 */
'rank'?: number;
}>;
} => r.body)
    );
  }

  /** Path part for operation `submitRequestSupervisorApprovePost()` */
  static readonly SubmitRequestSupervisorApprovePostPath = '/submit-request/supervisor-approve';

  /**
   * approve submit request.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `submitRequestSupervisorApprovePost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  submitRequestSupervisorApprovePost$Response(params: SubmitRequestSupervisorApprovePost$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return submitRequestSupervisorApprovePost(this.http, this.rootUrl, params, context);
  }

  /**
   * approve submit request.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `submitRequestSupervisorApprovePost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  submitRequestSupervisorApprovePost(params: SubmitRequestSupervisorApprovePost$Params, context?: HttpContext): Observable<{
}> {
    return this.submitRequestSupervisorApprovePost$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `submitRequestListAssignGet()` */
  static readonly SubmitRequestListAssignGetPath = '/submit-request/list-assign';

  /**
   * Get ranking of submit requests.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `submitRequestListAssignGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  submitRequestListAssignGet$Response(params?: SubmitRequestListAssignGet$Params, context?: HttpContext): Observable<StrictHttpResponse<{

/**
 * The current page number
 */
'pageNumber'?: number;

/**
 * The number of items per page
 */
'pageSize'?: number;

/**
 * The total number of items
 */
'totalItems'?: number;

/**
 * The total number of pages
 */
'totalPages'?: number;
'data'?: Array<{

/**
 * The account name of the user
 */
'accountName'?: string;

/**
 * The total score of the user
 */
'totalScore'?: string;

/**
 * The rank of the user
 */
'rank'?: number;
}>;
}>> {
    return submitRequestListAssignGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Get ranking of submit requests.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `submitRequestListAssignGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  submitRequestListAssignGet(params?: SubmitRequestListAssignGet$Params, context?: HttpContext): Observable<{

/**
 * The current page number
 */
'pageNumber'?: number;

/**
 * The number of items per page
 */
'pageSize'?: number;

/**
 * The total number of items
 */
'totalItems'?: number;

/**
 * The total number of pages
 */
'totalPages'?: number;
'data'?: Array<{

/**
 * The account name of the user
 */
'accountName'?: string;

/**
 * The total score of the user
 */
'totalScore'?: string;

/**
 * The rank of the user
 */
'rank'?: number;
}>;
}> {
    return this.submitRequestListAssignGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<{

/**
 * The current page number
 */
'pageNumber'?: number;

/**
 * The number of items per page
 */
'pageSize'?: number;

/**
 * The total number of items
 */
'totalItems'?: number;

/**
 * The total number of pages
 */
'totalPages'?: number;
'data'?: Array<{

/**
 * The account name of the user
 */
'accountName'?: string;

/**
 * The total score of the user
 */
'totalScore'?: string;

/**
 * The rank of the user
 */
'rank'?: number;
}>;
}>): {

/**
 * The current page number
 */
'pageNumber'?: number;

/**
 * The number of items per page
 */
'pageSize'?: number;

/**
 * The total number of items
 */
'totalItems'?: number;

/**
 * The total number of pages
 */
'totalPages'?: number;
'data'?: Array<{

/**
 * The account name of the user
 */
'accountName'?: string;

/**
 * The total score of the user
 */
'totalScore'?: string;

/**
 * The rank of the user
 */
'rank'?: number;
}>;
} => r.body)
    );
  }

  /** Path part for operation `submitRequestAdminApprovePost()` */
  static readonly SubmitRequestAdminApprovePostPath = '/submit-request/admin-approve';

  /**
   * admin approve submit request.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `submitRequestAdminApprovePost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  submitRequestAdminApprovePost$Response(params: SubmitRequestAdminApprovePost$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return submitRequestAdminApprovePost(this.http, this.rootUrl, params, context);
  }

  /**
   * admin approve submit request.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `submitRequestAdminApprovePost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  submitRequestAdminApprovePost(params: SubmitRequestAdminApprovePost$Params, context?: HttpContext): Observable<{
}> {
    return this.submitRequestAdminApprovePost$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `submitRequestApproverApprovePost()` */
  static readonly SubmitRequestApproverApprovePostPath = '/submit-request/approver-approve';

  /**
   * admin approve submit request.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `submitRequestApproverApprovePost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  submitRequestApproverApprovePost$Response(params: SubmitRequestApproverApprovePost$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return submitRequestApproverApprovePost(this.http, this.rootUrl, params, context);
  }

  /**
   * admin approve submit request.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `submitRequestApproverApprovePost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  submitRequestApproverApprovePost(params: SubmitRequestApproverApprovePost$Params, context?: HttpContext): Observable<{
}> {
    return this.submitRequestApproverApprovePost$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `submitRequestListAllGet()` */
  static readonly SubmitRequestListAllGetPath = '/submit-request/list-all';

  /**
   * Get ranking of submit requests.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `submitRequestListAllGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  submitRequestListAllGet$Response(params?: SubmitRequestListAllGet$Params, context?: HttpContext): Observable<StrictHttpResponse<{

/**
 * The current page number
 */
'pageNumber'?: number;

/**
 * The number of items per page
 */
'pageSize'?: number;

/**
 * The total number of items
 */
'totalItems'?: number;

/**
 * The total number of pages
 */
'totalPages'?: number;
'data'?: Array<{

/**
 * The account name of the user
 */
'accountName'?: string;

/**
 * The total score of the user
 */
'totalScore'?: string;

/**
 * The rank of the user
 */
'rank'?: number;
}>;
}>> {
    return submitRequestListAllGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Get ranking of submit requests.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `submitRequestListAllGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  submitRequestListAllGet(params?: SubmitRequestListAllGet$Params, context?: HttpContext): Observable<{

/**
 * The current page number
 */
'pageNumber'?: number;

/**
 * The number of items per page
 */
'pageSize'?: number;

/**
 * The total number of items
 */
'totalItems'?: number;

/**
 * The total number of pages
 */
'totalPages'?: number;
'data'?: Array<{

/**
 * The account name of the user
 */
'accountName'?: string;

/**
 * The total score of the user
 */
'totalScore'?: string;

/**
 * The rank of the user
 */
'rank'?: number;
}>;
}> {
    return this.submitRequestListAllGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<{

/**
 * The current page number
 */
'pageNumber'?: number;

/**
 * The number of items per page
 */
'pageSize'?: number;

/**
 * The total number of items
 */
'totalItems'?: number;

/**
 * The total number of pages
 */
'totalPages'?: number;
'data'?: Array<{

/**
 * The account name of the user
 */
'accountName'?: string;

/**
 * The total score of the user
 */
'totalScore'?: string;

/**
 * The rank of the user
 */
'rank'?: number;
}>;
}>): {

/**
 * The current page number
 */
'pageNumber'?: number;

/**
 * The number of items per page
 */
'pageSize'?: number;

/**
 * The total number of items
 */
'totalItems'?: number;

/**
 * The total number of pages
 */
'totalPages'?: number;
'data'?: Array<{

/**
 * The account name of the user
 */
'accountName'?: string;

/**
 * The total score of the user
 */
'totalScore'?: string;

/**
 * The rank of the user
 */
'rank'?: number;
}>;
} => r.body)
    );
  }

  /** Path part for operation `submitRequestListApproverGet()` */
  static readonly SubmitRequestListApproverGetPath = '/submit-request/list-approver';

  /**
   * Get list-approver of submit requests.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `submitRequestListApproverGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  submitRequestListApproverGet$Response(params?: SubmitRequestListApproverGet$Params, context?: HttpContext): Observable<StrictHttpResponse<{

/**
 * The current page number
 */
'pageNumber'?: number;

/**
 * The number of items per page
 */
'pageSize'?: number;

/**
 * The total number of items
 */
'totalItems'?: number;

/**
 * The total number of pages
 */
'totalPages'?: number;
'data'?: Array<{

/**
 * The account name of the user
 */
'accountName'?: string;

/**
 * The total score of the user
 */
'totalScore'?: string;

/**
 * The rank of the user
 */
'rank'?: number;
}>;
}>> {
    return submitRequestListApproverGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Get list-approver of submit requests.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `submitRequestListApproverGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  submitRequestListApproverGet(params?: SubmitRequestListApproverGet$Params, context?: HttpContext): Observable<{

/**
 * The current page number
 */
'pageNumber'?: number;

/**
 * The number of items per page
 */
'pageSize'?: number;

/**
 * The total number of items
 */
'totalItems'?: number;

/**
 * The total number of pages
 */
'totalPages'?: number;
'data'?: Array<{

/**
 * The account name of the user
 */
'accountName'?: string;

/**
 * The total score of the user
 */
'totalScore'?: string;

/**
 * The rank of the user
 */
'rank'?: number;
}>;
}> {
    return this.submitRequestListApproverGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<{

/**
 * The current page number
 */
'pageNumber'?: number;

/**
 * The number of items per page
 */
'pageSize'?: number;

/**
 * The total number of items
 */
'totalItems'?: number;

/**
 * The total number of pages
 */
'totalPages'?: number;
'data'?: Array<{

/**
 * The account name of the user
 */
'accountName'?: string;

/**
 * The total score of the user
 */
'totalScore'?: string;

/**
 * The rank of the user
 */
'rank'?: number;
}>;
}>): {

/**
 * The current page number
 */
'pageNumber'?: number;

/**
 * The number of items per page
 */
'pageSize'?: number;

/**
 * The total number of items
 */
'totalItems'?: number;

/**
 * The total number of pages
 */
'totalPages'?: number;
'data'?: Array<{

/**
 * The account name of the user
 */
'accountName'?: string;

/**
 * The total score of the user
 */
'totalScore'?: string;

/**
 * The rank of the user
 */
'rank'?: number;
}>;
} => r.body)
    );
  }

}
