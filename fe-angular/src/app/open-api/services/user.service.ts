/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { User } from '../models/user';
import { usersForgotPasswordPost } from '../fn/user/users-forgot-password-post';
import { UsersForgotPasswordPost$Params } from '../fn/user/users-forgot-password-post';
import { usersForgotPasswordVerifyPost } from '../fn/user/users-forgot-password-verify-post';
import { UsersForgotPasswordVerifyPost$Params } from '../fn/user/users-forgot-password-verify-post';
import { usersGet } from '../fn/user/users-get';
import { UsersGet$Params } from '../fn/user/users-get';
import { usersListSupervisorsGet } from '../fn/user/users-list-supervisors-get';
import { UsersListSupervisorsGet$Params } from '../fn/user/users-list-supervisors-get';
import { usersLoginPost } from '../fn/user/users-login-post';
import { UsersLoginPost$Params } from '../fn/user/users-login-post';
import { usersMeGet } from '../fn/user/users-me-get';
import { UsersMeGet$Params } from '../fn/user/users-me-get';
import { usersPasswordPut } from '../fn/user/users-password-put';
import { UsersPasswordPut$Params } from '../fn/user/users-password-put';
import { usersPut } from '../fn/user/users-put';
import { UsersPut$Params } from '../fn/user/users-put';
import { usersRegistryPost } from '../fn/user/users-registry-post';
import { UsersRegistryPost$Params } from '../fn/user/users-registry-post';

@Injectable({ providedIn: 'root' })
export class UserService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `usersRegistryPost()` */
  static readonly UsersRegistryPostPath = '/users/registry';

  /**
   * Registry new user account with basic information.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `usersRegistryPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  usersRegistryPost$Response(
    params: UsersRegistryPost$Params,
    context?: HttpContext,
  ): Observable<StrictHttpResponse<{}>> {
    return usersRegistryPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Registry new user account with basic information.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `usersRegistryPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  usersRegistryPost(
    params: UsersRegistryPost$Params,
    context?: HttpContext,
  ): Observable<{}> {
    return this.usersRegistryPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<{}>): {} => r.body),
    );
  }

  /** Path part for operation `usersLoginPost()` */
  static readonly UsersLoginPostPath = '/users/login';

  /**
   * Login to your account.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `usersLoginPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  usersLoginPost$Response(
    params: UsersLoginPost$Params,
    context?: HttpContext,
  ): Observable<
    StrictHttpResponse<{
      success?: boolean;
      payload?: User;
    }>
  > {
    return usersLoginPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Login to your account.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `usersLoginPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  usersLoginPost(
    params: UsersLoginPost$Params,
    context?: HttpContext,
  ): Observable<{
    success?: boolean;
    payload?: User;
  }> {
    return this.usersLoginPost$Response(params, context).pipe(
      map(
        (
          r: StrictHttpResponse<{
            success?: boolean;
            payload?: User;
          }>,
        ): {
          success?: boolean;
          payload?: User;
        } => r.body,
      ),
    );
  }

  /** Path part for operation `usersMeGet()` */
  static readonly UsersMeGetPath = '/users/me';

  /**
   * Get user information.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `usersMeGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  usersMeGet$Response(
    params?: UsersMeGet$Params,
    context?: HttpContext,
  ): Observable<
    StrictHttpResponse<{
      success?: boolean;
      payload?: {
        /**
         * The user avatar
         */
        avatar?: string;

        /**
         * The user email
         */
        email?: string;

        /**
         * The user fullName
         */
        fullName?: string;

        /**
         * The user token
         */
        token?: string;
      };
    }>
  > {
    return usersMeGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Get user information.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `usersMeGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  usersMeGet(
    params?: UsersMeGet$Params,
    context?: HttpContext,
  ): Observable<{
    success?: boolean;
    payload?: {
      /**
       * The user avatar
       */
      avatar?: string;

      /**
       * The user email
       */
      email?: string;

      /**
       * The user fullName
       */
      fullName?: string;

      /**
       * The user token
       */
      token?: string;
    };
  }> {
    return this.usersMeGet$Response(params, context).pipe(
      map(
        (
          r: StrictHttpResponse<{
            success?: boolean;
            payload?: {
              /**
               * The user avatar
               */
              avatar?: string;

              /**
               * The user email
               */
              email?: string;

              /**
               * The user fullName
               */
              fullName?: string;

              /**
               * The user token
               */
              token?: string;
            };
          }>,
        ): {
          success?: boolean;
          payload?: {
            /**
             * The user avatar
             */
            avatar?: string;

            /**
             * The user email
             */
            email?: string;

            /**
             * The user fullName
             */
            fullName?: string;

            /**
             * The user token
             */
            token?: string;
          };
        } => r.body,
      ),
    );
  }

  /** Path part for operation `usersGet()` */
  static readonly UsersGetPath = '/users';

  /**
   * Admin get all users.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `usersGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  usersGet$Response(
    params?: UsersGet$Params,
    context?: HttpContext,
  ): Observable<
    StrictHttpResponse<{
      success?: boolean;
      payload?: Array<User>;
    }>
  > {
    return usersGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Admin get all users.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `usersGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  usersGet(
    params?: UsersGet$Params,
    context?: HttpContext,
  ): Observable<{
    success?: boolean;
    payload?: Array<User>;
  }> {
    return this.usersGet$Response(params, context).pipe(
      map(
        (
          r: StrictHttpResponse<{
            success?: boolean;
            payload?: Array<User>;
          }>,
        ): {
          success?: boolean;
          payload?: Array<User>;
        } => r.body,
      ),
    );
  }

  /** Path part for operation `usersPut()` */
  static readonly UsersPutPath = '/users';

  /**
   * Update user profile.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `usersPut()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  usersPut$Response(
    params?: UsersPut$Params,
    context?: HttpContext,
  ): Observable<
    StrictHttpResponse<{
      success?: boolean;
    }>
  > {
    return usersPut(this.http, this.rootUrl, params, context);
  }

  /**
   * Update user profile.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `usersPut$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  usersPut(
    params?: UsersPut$Params,
    context?: HttpContext,
  ): Observable<{
    success?: boolean;
  }> {
    return this.usersPut$Response(params, context).pipe(
      map(
        (
          r: StrictHttpResponse<{
            success?: boolean;
          }>,
        ): {
          success?: boolean;
        } => r.body,
      ),
    );
  }

  /** Path part for operation `usersPasswordPut()` */
  static readonly UsersPasswordPutPath = '/users/password';

  /**
   * Update user password.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `usersPasswordPut()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  usersPasswordPut$Response(
    params: UsersPasswordPut$Params,
    context?: HttpContext,
  ): Observable<
    StrictHttpResponse<{
      success?: boolean;
    }>
  > {
    return usersPasswordPut(this.http, this.rootUrl, params, context);
  }

  /**
   * Update user password.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `usersPasswordPut$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  usersPasswordPut(
    params: UsersPasswordPut$Params,
    context?: HttpContext,
  ): Observable<{
    success?: boolean;
  }> {
    return this.usersPasswordPut$Response(params, context).pipe(
      map(
        (
          r: StrictHttpResponse<{
            success?: boolean;
          }>,
        ): {
          success?: boolean;
        } => r.body,
      ),
    );
  }

  /** Path part for operation `usersForgotPasswordPost()` */
  static readonly UsersForgotPasswordPostPath = '/users/forgot-password';

  /**
   * Reset user password.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `usersForgotPasswordPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  usersForgotPasswordPost$Response(
    params: UsersForgotPasswordPost$Params,
    context?: HttpContext,
  ): Observable<StrictHttpResponse<{}>> {
    return usersForgotPasswordPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Reset user password.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `usersForgotPasswordPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  usersForgotPasswordPost(
    params: UsersForgotPasswordPost$Params,
    context?: HttpContext,
  ): Observable<{}> {
    return this.usersForgotPasswordPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<{}>): {} => r.body),
    );
  }

  /** Path part for operation `usersForgotPasswordVerifyPost()` */
  static readonly UsersForgotPasswordVerifyPostPath =
    '/users/forgot-password/verify';

  /**
   * Verify user forgot password.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `usersForgotPasswordVerifyPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  usersForgotPasswordVerifyPost$Response(
    params: UsersForgotPasswordVerifyPost$Params,
    context?: HttpContext,
  ): Observable<StrictHttpResponse<{}>> {
    return usersForgotPasswordVerifyPost(
      this.http,
      this.rootUrl,
      params,
      context,
    );
  }

  /**
   * Verify user forgot password.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `usersForgotPasswordVerifyPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  usersForgotPasswordVerifyPost(
    params: UsersForgotPasswordVerifyPost$Params,
    context?: HttpContext,
  ): Observable<{}> {
    return this.usersForgotPasswordVerifyPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<{}>): {} => r.body),
    );
  }

  /** Path part for operation `usersListSupervisorsGet()` */
  static readonly UsersListSupervisorsGetPath = '/users/list-supervisors';

  /**
   * get all users suppervisor.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `usersListSupervisorsGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  usersListSupervisorsGet$Response(
    params?: UsersListSupervisorsGet$Params,
    context?: HttpContext,
  ): Observable<
    StrictHttpResponse<{
      success?: boolean;
      payload?: Array<User>;
    }>
  > {
    return usersListSupervisorsGet(this.http, this.rootUrl, params, context);
  }

  /**
   * get all users suppervisor.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `usersListSupervisorsGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  usersListSupervisorsGet(
    params?: UsersListSupervisorsGet$Params,
    context?: HttpContext,
  ): Observable<{
    success?: boolean;
    payload?: Array<User>;
  }> {
    return this.usersListSupervisorsGet$Response(params, context).pipe(
      map(
        (
          r: StrictHttpResponse<{
            success?: boolean;
            payload?: Array<User>;
          }>,
        ): {
          success?: boolean;
          payload?: Array<User>;
        } => r.body,
      ),
    );
  }
}
