{
  "openapi": "3.0.3",
  "info": {
    "title": "AI Crawl Data Backend API",
    "description": "Complete OpenAPI 3.0 specification for the AI-powered data crawling backend with real-time chat capabilities",
    "version": "1.0.0",
    "contact": {
      "name": "API Support",
      "email": "support@crawldata.ai"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "servers": [
    {
      "url": "http://localhost:3000",
      "description": "Development server"
    },
    {
      "url": "https://api.crawldata.ai",
      "description": "Production server"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "JWT Authorization header using the Bearer scheme. Example: \"Authorization: Bearer {token}\""
      }
    },
    "schemas": {
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "account_name": {
            "type": "string",
            "example": "john_doe"
          },
          "email": {
            "type": "string",
            "format": "email",
            "example": "john@example.com"
          },
          "role": {
            "type": "string",
            "enum": ["USER", "ADMIN", "SUPERVISOR"],
            "example": "USER"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "UserRegistration": {
        "type": "object",
        "required": ["account_name", "email", "password"],
        "properties": {
          "account_name": {
            "type": "string",
            "minLength": 3,
            "maxLength": 50,
            "example": "john_doe"
          },
          "email": {
            "type": "string",
            "format": "email",
            "example": "john@example.com"
          },
          "password": {
            "type": "string",
            "minLength": 8,
            "example": "securepassword123"
          }
        }
      },
      "LoginCredentials": {
        "type": "object",
        "required": ["email", "password"],
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "example": "john@example.com"
          },
          "password": {
            "type": "string",
            "example": "securepassword123"
          }
        }
      },
      "AuthResponse": {
        "type": "object",
        "properties": {
          "access_token": {
            "type": "string",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
          },
          "token_type": {
            "type": "string",
            "example": "bearer"
          },
          "expires_in": {
            "type": "integer",
            "example": 14400
          },
          "user": {
            "$ref": "#/components/schemas/User"
          }
        }
      },
      "Category": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "name": {
            "type": "string",
            "example": "Technical Support"
          },
          "description": {
            "type": "string",
            "example": "Technical issues and support requests"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "SubmitRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "title": {
            "type": "string",
            "example": "New Feature Request"
          },
          "description": {
            "type": "string",
            "example": "I would like to request a new feature for data visualization"
          },
          "category_id": {
            "type": "integer",
            "example": 1
          },
          "status": {
            "type": "string",
            "enum": ["pending", "approved", "rejected", "in_progress"],
            "example": "pending"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "CrawlRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "user_id": {
            "type": "integer",
            "example": 1
          },
          "requirement": {
            "type": "string",
            "example": "Crawl news articles about artificial intelligence from tech websites"
          },
          "status": {
            "type": "string",
            "enum": ["pending", "processing", "completed", "failed"],
            "example": "pending"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "completed_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "CrawledDataItem": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": ["table", "list", "structured_data", "page_content"],
            "example": "table"
          },
          "data": {
            "oneOf": [
              {
                "type": "array",
                "description": "Table data as array of objects"
              },
              {
                "type": "array",
                "description": "List data as array of strings"
              },
              {
                "type": "object",
                "description": "Structured data object"
              },
              {
                "type": "object",
                "description": "Page content with title, description, content"
              }
            ]
          },
          "source": {
            "type": "string",
            "format": "uri",
            "example": "https://example.com/news"
          }
        }
      },
      "CrawledData": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "507f1f77bcf86cd799439011"
          },
          "request_id": {
            "type": "integer",
            "example": 1
          },
          "url": {
            "type": "string",
            "format": "uri",
            "example": "https://example.com/news"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CrawledDataItem"
            }
          },
          "validated": {
            "type": "boolean",
            "example": false
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Conversation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "507f1f77bcf86cd799439011"
          },
          "user_id": {
            "type": "integer",
            "example": 1
          },
          "request_id": {
            "type": "integer",
            "nullable": true,
            "example": null
          },
          "messages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Message": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "507f1f77bcf86cd799439011"
          },
          "role": {
            "type": "string",
            "enum": ["user", "assistant"],
            "example": "user"
          },
          "content": {
            "type": "string",
            "example": "Can you help me crawl data about AI news?"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "WebSocketMessage": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "conversation_history",
              "chat_message",
              "chat_response",
              "data_request_proposal",
              "approve_data_request",
              "reject_data_request",
              "data_request_approved",
              "data_request_rejected",
              "crawling_completed",
              "crawling_failed"
            ],
            "example": "chat_message"
          },
          "content": {
            "type": "string",
            "description": "Message content for chat messages"
          },
          "message": {
            "type": "string",
            "description": "Response message"
          },
          "request_id": {
            "type": "integer",
            "description": "Associated request ID"
          },
          "requirement": {
            "type": "string",
            "description": "Formatted data requirement"
          },
          "explanation": {
            "type": "string",
            "description": "Explanation of why this is/isn't a data request"
          },
          "message_id": {
            "type": "number",
            "description": "Unique message identifier"
          },
          "conversation_id": {
            "type": "string",
            "description": "Conversation identifier"
          },
          "messages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Message"
            },
            "description": "Conversation message history"
          }
        }
      },
      "Error": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "msg": {
                  "type": "string",
                  "example": "Email is required"
                },
                "param": {
                  "type": "string",
                  "example": "email"
                },
                "location": {
                  "type": "string",
                  "example": "body"
                }
              }
            }
          }
        }
      }
    }
  },
  "paths": {
    "/api/auth/register": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Register a new user account",
        "description": "Create a new user account with the provided information",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserRegistration"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User account created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation error or user already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/login": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Authenticate user",
        "description": "Login with email and password to receive JWT token",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginCredentials"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/users": {
      "get": {
        "tags": ["Users"],
        "summary": "Get all users",
        "description": "Retrieve a paginated list of all users (admin only)",
        "security": [{"bearerAuth": []}],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            },
            "description": "Page number"
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 10
            },
            "description": "Number of items per page"
          }
        ],
        "responses": {
          "200": {
            "description": "List of users retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "users": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/User"
                      }
                    },
                    "total": {
                      "type": "integer",
                      "example": 25
                    },
                    "page": {
                      "type": "integer",
                      "example": 1
                    },
                    "pages": {
                      "type": "integer",
                      "example": 3
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Users"],
        "summary": "Create new user",
        "description": "Create a new user account (admin only)",
        "security": [{"bearerAuth": []}],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["account_name", "email", "password", "role"],
                "properties": {
                  "account_name": {
                    "type": "string",
                    "example": "jane_doe"
                  },
                  "email": {
                    "type": "string",
                    "format": "email",
                    "example": "jane@example.com"
                  },
                  "password": {
                    "type": "string",
                    "example": "securepassword123"
                  },
                  "role": {
                    "type": "string",
                    "enum": ["USER", "ADMIN", "SUPERVISOR"],
                    "example": "USER"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/{id}": {
      "get": {
        "tags": ["Users"],
        "summary": "Get user by ID",
        "description": "Retrieve detailed information about a specific user",
        "security": [{"bearerAuth": []}],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "User ID"
          }
        ],
        "responses": {
          "200": {
            "description": "User information retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Users"],
        "summary": "Update user",
        "description": "Update user information",
        "security": [{"bearerAuth": []}],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "User ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "account_name": {
                    "type": "string",
                    "example": "john_smith"
                  },
                  "email": {
                    "type": "string",
                    "format": "email",
                    "example": "john.smith@example.com"
                  },
                  "role": {
                    "type": "string",
                    "enum": ["USER", "ADMIN", "SUPERVISOR"],
                    "example": "ADMIN"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - cannot modify other users or insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Users"],
        "summary": "Delete user",
        "description": "Delete a user account (admin only)",
        "security": [{"bearerAuth": []}],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "User ID"
          }
        ],
        "responses": {
          "204": {
            "description": "User deleted successfully"
          },
          "403": {
            "description": "Forbidden - insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/categories": {
      "get": {
        "tags": ["Categories"],
        "summary": "Get all categories",
        "description": "Retrieve all request categories",
        "security": [{"bearerAuth": []}],
        "responses": {
          "200": {
            "description": "List of categories retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Category"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Categories"],
        "summary": "Create category",
        "description": "Create a new request category",
        "security": [{"bearerAuth": []}],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["name"],
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "Technical Support"
                  },
                  "description": {
                    "type": "string",
                    "example": "Technical issues and support requests"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Category created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Category"
                }
              }
            }
          }
        }
      }
    },
    "/api/submit-request": {
      "get": {
        "tags": ["Submit Requests"],
        "summary": "Get submit requests",
        "description": "Get user's submit requests with optional filtering",
        "security": [{"bearerAuth": []}],
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["pending", "approved", "rejected", "in_progress"]
            },
            "description": "Filter by status"
          },
          {
            "name": "category_id",
            "in": "query",
            "schema": {
              "type": "integer"
            },
            "description": "Filter by category"
          }
        ],
        "responses": {
          "200": {
            "description": "List of submit requests retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SubmitRequest"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Submit Requests"],
        "summary": "Create submit request",
        "description": "Create a new submit request",
        "security": [{"bearerAuth": []}],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["title", "description", "category_id"],
                "properties": {
                  "title": {
                    "type": "string",
                    "example": "New Feature Request"
                  },
                  "description": {
                    "type": "string",
                    "example": "I would like to request a new feature for data visualization"
                  },
                  "category_id": {
                    "type": "integer",
                    "example": 1
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Submit request created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubmitRequest"
                }
              }
            }
          }
        }
      }
    },
    "/api/data/{request_id}": {
      "get": {
        "tags": ["Data Export"],
        "summary": "Get crawled data",
        "description": "Retrieve crawled data for a specific request",
        "security": [{"bearerAuth": []}],
        "parameters": [
          {
            "name": "request_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Crawl request ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Crawled data retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "request_id": {
                      "type": "integer"
                    },
                    "status": {
                      "type": "string",
                      "enum": ["pending", "processing", "completed", "failed"]
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/CrawledData"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Request not found or access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/data/{request_id}/export": {
      "get": {
        "tags": ["Data Export"],
        "summary": "Export crawled data",
        "description": "Export crawled data in various formats",
        "security": [{"bearerAuth": []}],
        "parameters": [
          {
            "name": "request_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Crawl request ID"
          },
          {
            "name": "format",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["json", "csv", "xlsx"],
              "default": "json"
            },
            "description": "Export format"
          }
        ],
        "responses": {
          "200": {
            "description": "Data exported successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "request_id": {
                      "type": "integer"
                    },
                    "requirement": {
                      "type": "string"
                    },
                    "exported_at": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "format": {
                      "type": "string"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/CrawledData"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Request not found or not completed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/dialogs/conversations": {
      "get": {
        "tags": ["Dialogs"],
        "summary": "Get user conversations",
        "description": "Retrieve all conversations for the authenticated user",
        "security": [{"bearerAuth": []}],
        "responses": {
          "200": {
            "description": "List of conversations retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "conversations": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Conversation"
                      }
                    },
                    "total": {
                      "type": "integer",
                      "example": 5
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/dialogs/conversations/{conversation_id}": {
      "get": {
        "tags": ["Dialogs"],
        "summary": "Get specific conversation",
        "description": "Retrieve a specific conversation by ID",
        "security": [{"bearerAuth": []}],
        "parameters": [
          {
            "name": "conversation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Conversation ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Conversation retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Conversation"
                }
              }
            }
          },
          "404": {
            "description": "Conversation not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Dialogs"],
        "summary": "Delete conversation",
        "description": "Delete a specific conversation",
        "security": [{"bearerAuth": []}],
        "parameters": [
          {
            "name": "conversation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Conversation ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Conversation deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Conversation deleted successfully"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Conversation not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/chat/ws": {
      "get": {
        "tags": ["WebSocket"],
        "summary": "WebSocket connection for real-time chat",
        "description": "Establish WebSocket connection for real-time AI chat and data crawling requests. Requires JWT token as query parameter.",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "JWT authentication token"
          }
        ],
        "responses": {
          "101": {
            "description": "WebSocket connection established successfully",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "WebSocket connection established"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - invalid or missing token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    }
  }
}