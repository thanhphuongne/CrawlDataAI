{
  "info": {
    "name": "AI Crawl Data Backend API",
    "description": "Complete API collection for the AI-powered data crawling backend with real-time chat. Includes authentication, user management, data crawling, and WebSocket chat functionality.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "backend-api",
    "_postman_id": "ai-crawl-data-backend"
  },
  "item": [
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Register User",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"account_name\": \"john_doe\",\n  \"email\": \"john@example.com\",\n  \"password\": \"securepassword123\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/auth/register",
              "host": ["{{base_url}}"],
              "path": ["api", "auth", "register"]
            }
          }
        },
        {
          "name": "Login User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has required fields', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('access_token');",
                  "    pm.expect(response).to.have.property('token_type');",
                  "    pm.expect(response).to.have.property('user');",
                  "    pm.expect(response.user).to.have.property('id');",
                  "    pm.expect(response.user).to.have.property('email');",
                  "});",
                  "",
                  "pm.test('Token is stored in collection variable', function () {",
                  "    const response = pm.response.json();",
                  "    if (response.access_token) {",
                  "        pm.collectionVariables.set('token', response.access_token);",
                  "        pm.collectionVariables.set('user_id', response.user.id);",
                  "        console.log('JWT Token stored successfully');",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"john@example.com\",\n  \"password\": \"securepassword123\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/auth/login",
              "host": ["{{base_url}}"],
              "path": ["api", "auth", "login"]
            }
          }
        }
      ]
    },
    {
      "name": "Users",
      "item": [
        {
          "name": "Get All Users",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/users",
              "host": ["{{base_url}}"],
              "path": ["api", "users"]
            }
          }
        },
        {
          "name": "Get User by ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/users/{{created_user_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "users", "{{created_user_id}}"]
            },
            "description": "Retrieve details of a specific user by ID. Uses the ID from the created user."
          }
        },
        {
          "name": "Create User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response has user data', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('account_name');",
                  "    pm.expect(response).to.have.property('email');",
                  "    pm.expect(response).to.have.property('role');",
                  "});",
                  "",
                  "pm.test('User ID is stored', function () {",
                  "    const response = pm.response.json();",
                  "    if (response.id) {",
                  "        pm.collectionVariables.set('created_user_id', response.id);",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"account_name\": \"jane_doe\",\n  \"email\": \"jane@example.com\",\n  \"password\": \"securepassword123\",\n  \"role\": \"USER\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/users",
              "host": ["{{base_url}}"],
              "path": ["api", "users"]
            },
            "description": "Create a new user account (admin only). Requires Bearer token authentication."
          }
        },
        {
          "name": "Update User",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"account_name\": \"jane_smith\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/users/{{created_user_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "users", "{{created_user_id}}"]
            },
            "description": "Update user information. Uses the ID from the created user."
          }
        },
        {
          "name": "Delete User",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/users/{{created_user_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "users", "{{created_user_id}}"]
            },
            "description": "Delete a user account (admin only). Uses the ID from the created user."
          }
        }
      ]
    },
    {
      "name": "Categories",
      "item": [
        {
          "name": "Get All Categories",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/categories",
              "host": ["{{base_url}}"],
              "path": ["api", "categories"]
            }
          }
        },
        {
          "name": "Create Category",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Technical Support\",\n  \"description\": \"Technical issues and support requests\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/categories",
              "host": ["{{base_url}}"],
              "path": ["api", "categories"]
            }
          }
        }
      ]
    },
    {
      "name": "Submit Requests",
      "item": [
        {
          "name": "Get Submit Requests",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/submit-request",
              "host": ["{{base_url}}"],
              "path": ["api", "submit-request"]
            }
          }
        },
        {
          "name": "Create Submit Request",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"New Feature Request\",\n  \"description\": \"I would like to request a new feature for data visualization\",\n  \"category_id\": 1\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/submit-request",
              "host": ["{{base_url}}"],
              "path": ["api", "submit-request"]
            }
          }
        }
      ]
    },
    {
      "name": "Data Export",
      "item": [
        {
          "name": "Get Crawled Data",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/data/1",
              "host": ["{{base_url}}"],
              "path": ["api", "data", "1"]
            }
          }
        },
        {
          "name": "Export Crawled Data",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/data/1/export?format=json",
              "host": ["{{base_url}}"],
              "path": ["api", "data", "1", "export"],
              "query": [
                {
                  "key": "format",
                  "value": "json"
                }
              ]
            }
          }
        }
      ]
    },
    {
      "name": "Dialogs",
      "item": [
        {
          "name": "Get Conversations",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/dialogs/conversations",
              "host": ["{{base_url}}"],
              "path": ["api", "dialogs", "conversations"]
            }
          }
        },
        {
          "name": "Get Specific Conversation",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/dialogs/conversations/507f1f77bcf86cd799439011",
              "host": ["{{base_url}}"],
              "path": ["api", "dialogs", "conversations", "507f1f77bcf86cd799439011"]
            }
          }
        },
        {
          "name": "Delete Conversation",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/dialogs/conversations/507f1f77bcf86cd799439011",
              "host": ["{{base_url}}"],
              "path": ["api", "dialogs", "conversations", "507f1f77bcf86cd799439011"]
            }
          }
        }
      ]
    },
    {
      "name": "WebSocket Chat",
      "item": [
        {
          "name": "WebSocket Connection Info",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/chat/ws?token={{token}}",
              "host": ["{{base_url}}"],
              "path": ["chat", "ws"],
              "query": [
                {
                  "key": "token",
                  "value": "{{token}}",
                  "description": "JWT token for WebSocket authentication"
                }
              ]
            },
            "description": "WebSocket endpoint for real-time chat. Use a WebSocket client to connect to this URL with the token parameter.\n\nWebSocket Message Format:\n- Send: {\"type\": \"chat_message\", \"content\": \"your message\", \"request_id\": null}\n- Receive: {\"type\": \"chat_response\", \"message\": \"AI response\"} or {\"type\": \"data_request_proposal\", \"requirement\": \"formatted requirement\"}"
          }
        }
      ]
    },
    {
      "name": "Complete Data Crawling Flow",
      "item": [
        {
          "name": "1. Simulate Data Crawling via WebSocket",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/chat/ws?token={{token}}",
              "host": ["{{base_url}}"],
              "path": ["chat", "ws"],
              "query": [
                {
                  "key": "token",
                  "value": "{{token}}"
                }
              ]
            },
            "description": "WebSocket endpoint for real-time chat and data crawling.\n\nTo test data crawling:\n1. Connect to this WebSocket URL\n2. Send: {\"type\": \"chat_message\", \"content\": \"I need data about AI news\", \"request_id\": null}\n3. AI will respond with a data request proposal\n4. Send: {\"type\": \"approve_data_request\", \"requirement\": \"Crawl AI news from tech sites\", \"message_id\": 123}\n5. System will create crawling request and start processing\n\nUse a WebSocket client like Postman, WebSocket King, or browser console to test."
          }
        },
        {
          "name": "2. Check Request Status",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/data/{{request_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "data", "{{request_id}}"]
            },
            "description": "Check the status of a crawling request. Run this after creating a request to monitor progress."
          }
        },
        {
          "name": "3. Get Crawled Data (when complete)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/data/{{request_id}}/export?format=json",
              "host": ["{{base_url}}"],
              "path": ["api", "data", "{{request_id}}", "export"],
              "query": [
                {
                  "key": "format",
                  "value": "json",
                  "description": "Export format: json, csv, or xlsx"
                }
              ]
            },
            "description": "Download the crawled data once the request is completed. This endpoint returns the extracted data from crawled websites."
          }
        }
      ],
      "description": "Complete workflow for testing data crawling functionality"
    },
    {
      "name": "Health Check",
      "item": [
        {
          "name": "API Health Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/",
              "host": ["{{base_url}}"],
              "path": [""]
            },
            "description": "Check if the API server is running and responding"
          }
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Auto-add Authorization header for requests that need it",
          "if (pm.request.headers.has('Authorization')) {",
          "    // Remove existing Authorization header",
          "    pm.request.headers.remove('Authorization');",
          "}",
          "",
          "// Add Bearer token if available",
          "const token = pm.collectionVariables.get('token');",
          "if (token && pm.request.url.path.some(segment => {",
          "    return ['api', 'chat'].includes(segment);",
          "})) {",
          "    pm.request.headers.add({",
          "        key: 'Authorization',",
          "        value: `Bearer ${token}`",
          "    });",
          "}"
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:3000",
      "type": "string"
    },
    {
      "key": "token",
      "value": "",
      "type": "string"
    },
    {
      "key": "user_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "request_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "created_user_id",
      "value": "",
      "type": "string"
    }
  ]
}