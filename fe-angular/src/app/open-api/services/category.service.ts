/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { categoriesGet } from '../fn/category/categories-get';
import { CategoriesGet$Params } from '../fn/category/categories-get';
import { categoriesIdPut } from '../fn/category/categories-id-put';
import { CategoriesIdPut$Params } from '../fn/category/categories-id-put';
import { categoriesPost } from '../fn/category/categories-post';
import { CategoriesPost$Params } from '../fn/category/categories-post';
import { Category } from '../models/category';
import { typeCategoriesPost } from '../fn/category/type-categories-post';
import { TypeCategoriesPost$Params } from '../fn/category/type-categories-post';

@Injectable({ providedIn: 'root' })
export class CategoryService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `categoriesGet()` */
  static readonly CategoriesGetPath = '/categories';

  /**
   * Get categories.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `categoriesGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  categoriesGet$Response(params?: CategoriesGet$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'success'?: boolean;
'payload'?: Array<Category>;
}>> {
    return categoriesGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Get categories.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `categoriesGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  categoriesGet(params?: CategoriesGet$Params, context?: HttpContext): Observable<{
'success'?: boolean;
'payload'?: Array<Category>;
}> {
    return this.categoriesGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'success'?: boolean;
'payload'?: Array<Category>;
}>): {
'success'?: boolean;
'payload'?: Array<Category>;
} => r.body)
    );
  }

  /** Path part for operation `categoriesPost()` */
  static readonly CategoriesPostPath = '/categories';

  /**
   * Create new category.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `categoriesPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  categoriesPost$Response(params?: CategoriesPost$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return categoriesPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Create new category.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `categoriesPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  categoriesPost(params?: CategoriesPost$Params, context?: HttpContext): Observable<{
}> {
    return this.categoriesPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `typeCategoriesPost()` */
  static readonly TypeCategoriesPostPath = '/type-categories';

  /**
   * Create new category.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `typeCategoriesPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  typeCategoriesPost$Response(params?: TypeCategoriesPost$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return typeCategoriesPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Create new category.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `typeCategoriesPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  typeCategoriesPost(params?: TypeCategoriesPost$Params, context?: HttpContext): Observable<{
}> {
    return this.typeCategoriesPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `categoriesIdPut()` */
  static readonly CategoriesIdPutPath = '/categories/{id}';

  /**
   * Update category.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `categoriesIdPut()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  categoriesIdPut$Response(params: CategoriesIdPut$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return categoriesIdPut(this.http, this.rootUrl, params, context);
  }

  /**
   * Update category.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `categoriesIdPut$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  categoriesIdPut(params: CategoriesIdPut$Params, context?: HttpContext): Observable<{
}> {
    return this.categoriesIdPut$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

}
