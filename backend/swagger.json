{
  "swagger": "2.0",
  "info": {
    "title": "AI Crawl Data Backend API",
    "description": "API documentation for the AI-powered data crawling backend with real-time chat",
    "version": "1.0.0",
    "contact": {
      "name": "API Support"
    }
  },
  "host": "localhost:3000",
  "basePath": "/",
  "schemes": ["http", "https"],
  "consumes": ["application/json"],
  "produces": ["application/json"],
  "securityDefinitions": {
    "BearerAuth": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header",
      "description": "JWT Authorization header using the Bearer scheme. Example: \"Authorization: Bearer {token}\""
    }
  },
  "security": [
    {
      "BearerAuth": []
    }
  ],
  "paths": {
    "/api/auth/register": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Register a new user",
        "description": "Create a new user account",
        "parameters": [
          {
            "name": "user",
            "in": "body",
            "description": "User registration data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserRegistration"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "User created successfully",
            "schema": {
              "$ref": "#/definitions/AuthResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/api/auth/login": {
      "post": {
        "tags": ["Authentication"],
        "summary": "User login",
        "description": "Authenticate user and return JWT token",
        "parameters": [
          {
            "name": "credentials",
            "in": "body",
            "description": "User login credentials",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LoginCredentials"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Login successful",
            "schema": {
              "$ref": "#/definitions/AuthResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/api/users": {
      "get": {
        "tags": ["Users"],
        "summary": "Get all users",
        "description": "Retrieve a list of all users",
        "security": [{"BearerAuth": []}],
        "responses": {
          "200": {
            "description": "List of users",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Users"],
        "summary": "Create a new user",
        "description": "Create a new user (admin only)",
        "security": [{"BearerAuth": []}],
        "parameters": [
          {
            "name": "user",
            "in": "body",
            "description": "User data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserInput"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "User created",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        }
      }
    },
    "/api/users/{id}": {
      "get": {
        "tags": ["Users"],
        "summary": "Get user by ID",
        "description": "Retrieve a specific user by ID",
        "security": [{"BearerAuth": []}],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User ID",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "User data",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "put": {
        "tags": ["Users"],
        "summary": "Update user",
        "description": "Update user information",
        "security": [{"BearerAuth": []}],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User ID",
            "required": true,
            "type": "integer"
          },
          {
            "name": "user",
            "in": "body",
            "description": "Updated user data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User updated",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        }
      },
      "delete": {
        "tags": ["Users"],
        "summary": "Delete user",
        "description": "Delete a user (admin only)",
        "security": [{"BearerAuth": []}],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User ID",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "User deleted"
          }
        }
      }
    },
    "/api/categories": {
      "get": {
        "tags": ["Categories"],
        "summary": "Get all categories",
        "description": "Retrieve all request categories",
        "security": [{"BearerAuth": []}],
        "responses": {
          "200": {
            "description": "List of categories",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Category"
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Categories"],
        "summary": "Create category",
        "description": "Create a new request category",
        "security": [{"BearerAuth": []}],
        "parameters": [
          {
            "name": "category",
            "in": "body",
            "description": "Category data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CategoryInput"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Category created",
            "schema": {
              "$ref": "#/definitions/Category"
            }
          }
        }
      }
    },
    "/api/submit-request": {
      "get": {
        "tags": ["Submit Requests"],
        "summary": "Get submit requests",
        "description": "Get user's submit requests",
        "security": [{"BearerAuth": []}],
        "responses": {
          "200": {
            "description": "List of submit requests",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SubmitRequest"
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Submit Requests"],
        "summary": "Create submit request",
        "description": "Create a new submit request",
        "security": [{"BearerAuth": []}],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "description": "Submit request data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SubmitRequestInput"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Request created",
            "schema": {
              "$ref": "#/definitions/SubmitRequest"
            }
          }
        }
      }
    },
    "/api/data/{request_id}": {
      "get": {
        "tags": ["Data Export"],
        "summary": "Get crawled data",
        "description": "Retrieve crawled data for a specific request",
        "security": [{"BearerAuth": []}],
        "parameters": [
          {
            "name": "request_id",
            "in": "path",
            "description": "Request ID",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Crawled data",
            "schema": {
              "$ref": "#/definitions/CrawledDataResponse"
            }
          },
          "404": {
            "description": "Request not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/api/data/{request_id}/export": {
      "get": {
        "tags": ["Data Export"],
        "summary": "Export crawled data",
        "description": "Export crawled data in JSON format",
        "security": [{"BearerAuth": []}],
        "parameters": [
          {
            "name": "request_id",
            "in": "path",
            "description": "Request ID",
            "required": true,
            "type": "integer"
          },
          {
            "name": "format",
            "in": "query",
            "description": "Export format",
            "type": "string",
            "enum": ["json"],
            "default": "json"
          }
        ],
        "responses": {
          "200": {
            "description": "Exported data",
            "schema": {
              "$ref": "#/definitions/ExportedData"
            }
          }
        }
      }
    },
    "/api/dialogs/conversations": {
      "get": {
        "tags": ["Dialogs"],
        "summary": "Get user conversations",
        "description": "Retrieve all conversations for the authenticated user",
        "security": [{"BearerAuth": []}],
        "responses": {
          "200": {
            "description": "List of conversations",
            "schema": {
              "type": "object",
              "properties": {
                "conversations": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Conversation"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/dialogs/conversations/{conversation_id}": {
      "get": {
        "tags": ["Dialogs"],
        "summary": "Get specific conversation",
        "description": "Retrieve a specific conversation by ID",
        "security": [{"BearerAuth": []}],
        "parameters": [
          {
            "name": "conversation_id",
            "in": "path",
            "description": "Conversation ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Conversation data",
            "schema": {
              "$ref": "#/definitions/Conversation"
            }
          }
        }
      },
      "delete": {
        "tags": ["Dialogs"],
        "summary": "Delete conversation",
        "description": "Delete a specific conversation",
        "security": [{"BearerAuth": []}],
        "parameters": [
          {
            "name": "conversation_id",
            "in": "path",
            "description": "Conversation ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Conversation deleted",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Conversation deleted successfully"
                }
              }
            }
          }
        }
      }
    },
    "/chat/ws": {
      "get": {
        "tags": ["WebSocket"],
        "summary": "WebSocket connection",
        "description": "Establish WebSocket connection for real-time chat",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "JWT authentication token",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "101": {
            "description": "WebSocket connection established"
          }
        }
      }
    }
  },
  "definitions": {
    "User": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "example": 1
        },
        "account_name": {
          "type": "string",
          "example": "john_doe"
        },
        "email": {
          "type": "string",
          "example": "john@example.com"
        },
        "role": {
          "type": "string",
          "enum": ["USER", "ADMIN", "SUPERVISOR"],
          "example": "USER"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "UserRegistration": {
      "type": "object",
      "required": ["account_name", "email", "password"],
      "properties": {
        "account_name": {
          "type": "string",
          "example": "john_doe"
        },
        "email": {
          "type": "string",
          "example": "john@example.com"
        },
        "password": {
          "type": "string",
          "example": "securepassword123"
        }
      }
    },
    "UserInput": {
      "type": "object",
      "required": ["account_name", "email", "password", "role"],
      "properties": {
        "account_name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "role": {
          "type": "string",
          "enum": ["USER", "ADMIN", "SUPERVISOR"]
        }
      }
    },
    "UserUpdate": {
      "type": "object",
      "properties": {
        "account_name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "role": {
          "type": "string",
          "enum": ["USER", "ADMIN", "SUPERVISOR"]
        }
      }
    },
    "LoginCredentials": {
      "type": "object",
      "required": ["email", "password"],
      "properties": {
        "email": {
          "type": "string",
          "example": "john@example.com"
        },
        "password": {
          "type": "string",
          "example": "securepassword123"
        }
      }
    },
    "AuthResponse": {
      "type": "object",
      "properties": {
        "access_token": {
          "type": "string",
          "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        },
        "token_type": {
          "type": "string",
          "example": "bearer"
        },
        "user": {
          "$ref": "#/definitions/User"
        }
      }
    },
    "Category": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      }
    },
    "CategoryInput": {
      "type": "object",
      "required": ["name"],
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      }
    },
    "SubmitRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "category_id": {
          "type": "integer"
        },
        "status": {
          "type": "string",
          "enum": ["pending", "approved", "rejected"]
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "SubmitRequestInput": {
      "type": "object",
      "required": ["title", "description", "category_id"],
      "properties": {
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "category_id": {
          "type": "integer"
        }
      }
    },
    "CrawledDataResponse": {
      "type": "object",
      "properties": {
        "request_id": {
          "type": "integer"
        },
        "status": {
          "type": "string",
          "enum": ["pending", "processing", "completed", "failed"]
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CrawledDataItem"
          }
        }
      }
    },
    "CrawledDataItem": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string"
        },
        "request_id": {
          "type": "integer"
        },
        "url": {
          "type": "string"
        },
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": ["table", "list", "structured_data", "page_content"]
              },
              "data": {
                "type": "object"
              },
              "source": {
                "type": "string"
              }
            }
          }
        },
        "validated": {
          "type": "boolean"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "ExportedData": {
      "type": "object",
      "properties": {
        "request_id": {
          "type": "integer"
        },
        "requirement": {
          "type": "string"
        },
        "exported_at": {
          "type": "string",
          "format": "date-time"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CrawledDataItem"
          }
        }
      }
    },
    "Conversation": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string"
        },
        "user_id": {
          "type": "integer"
        },
        "request_id": {
          "type": "integer",
          "nullable": true
        },
        "messages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Message"
          }
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "Message": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string"
        },
        "role": {
          "type": "string",
          "enum": ["user", "assistant"]
        },
        "content": {
          "type": "string"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "ErrorResponse": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "msg": {
                "type": "string"
              },
              "param": {
                "type": "string"
              }
            }
          }
        }
      }
    }
  }
}